// Mocks generated by Mockito 5.4.4 from annotations
// in pocket_codex/test/unit/home/home_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i3;
import 'package:get/get.dart' as _i4;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pocket_codex/app/data/models/models.dart' as _i7;
import 'package:pocket_codex/app/data/providers/providers.dart' as _i2;
import 'package:pocket_codex/app/data/repositories/repositories.dart' as _i5;
import 'package:pocket_codex/app/modules/home/home_controller.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePokemonProvider_0 extends _i1.SmartFake
    implements _i2.PokemonProvider {
  _FakePokemonProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemonTypeProvider_1 extends _i1.SmartFake
    implements _i2.PokemonTypeProvider {
  _FakePokemonTypeProvider_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemonTypeDetailProvider_2 extends _i1.SmartFake
    implements _i2.PokemonTypeDetailProvider {
  _FakePokemonTypeDetailProvider_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemonDetailProvider_3 extends _i1.SmartFake
    implements _i2.PokemonDetailProvider {
  _FakePokemonDetailProvider_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollController_4 extends _i1.SmartFake
    implements _i3.ScrollController {
  _FakeScrollController_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRx_5<T> extends _i1.SmartFake implements _i4.Rx<T> {
  _FakeRx_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxList_6<E> extends _i1.SmartFake implements _i4.RxList<E> {
  _FakeRxList_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_7<T> extends _i1.SmartFake
    implements _i4.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxStatus_8 extends _i1.SmartFake implements _i4.RxStatus {
  _FakeRxStatus_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonRepository extends _i1.Mock implements _i5.PokemonRepository {
  MockPokemonRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakePokemonProvider_0(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.PokemonProvider);

  @override
  _i6.Future<_i7.Pokemon?> fetchPokemon(
    int? offset,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPokemon,
          [
            offset,
            limit,
          ],
        ),
        returnValue: _i6.Future<_i7.Pokemon?>.value(),
      ) as _i6.Future<_i7.Pokemon?>);
}

/// A class which mocks [PokemonTypeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonTypeRepository extends _i1.Mock
    implements _i5.PokemonTypeRepository {
  MockPokemonTypeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonTypeProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakePokemonTypeProvider_1(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.PokemonTypeProvider);

  @override
  _i6.Future<List<_i7.PokemonType>?> fetchPokemonType(
    int? offset,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPokemonType,
          [
            offset,
            limit,
          ],
        ),
        returnValue: _i6.Future<List<_i7.PokemonType>?>.value(),
      ) as _i6.Future<List<_i7.PokemonType>?>);
}

/// A class which mocks [PokemonTypeDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonTypeDetailRepository extends _i1.Mock
    implements _i5.PokemonTypeDetailRepository {
  MockPokemonTypeDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonTypeDetailProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakePokemonTypeDetailProvider_2(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.PokemonTypeDetailProvider);

  @override
  _i6.Future<_i7.PokemonTypeDetail?> fetchPokemonType(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPokemonType,
          [name],
        ),
        returnValue: _i6.Future<_i7.PokemonTypeDetail?>.value(),
      ) as _i6.Future<_i7.PokemonTypeDetail?>);
}

/// A class which mocks [PokemonDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonDetailRepository extends _i1.Mock
    implements _i5.PokemonDetailRepository {
  MockPokemonDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonDetailProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakePokemonDetailProvider_3(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.PokemonDetailProvider);

  @override
  _i6.Future<_i7.PokemonDetail?> fetchPokemonDetail(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPokemonDetail,
          [name],
        ),
        returnValue: _i6.Future<_i7.PokemonDetail?>.value(),
      ) as _i6.Future<_i7.PokemonDetail?>);

  @override
  _i6.Future<_i7.Evolution?> fetchEvolution(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchEvolution,
          [id],
        ),
        returnValue: _i6.Future<_i7.Evolution?>.value(),
      ) as _i6.Future<_i7.Evolution?>);

  @override
  _i6.Future<_i7.PokemonSpecies?> fetchSpecies(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchSpecies,
          [id],
        ),
        returnValue: _i6.Future<_i7.PokemonSpecies?>.value(),
      ) as _i6.Future<_i7.PokemonSpecies?>);
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i8.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ScrollController get scrollController => (super.noSuchMethod(
        Invocation.getter(#scrollController),
        returnValue: _FakeScrollController_4(
          this,
          Invocation.getter(#scrollController),
        ),
      ) as _i3.ScrollController);

  @override
  _i4.Rx<String> get filter => (super.noSuchMethod(
        Invocation.getter(#filter),
        returnValue: _FakeRx_5<String>(
          this,
          Invocation.getter(#filter),
        ),
      ) as _i4.Rx<String>);

  @override
  set filter(_i4.Rx<String>? _filter) => super.noSuchMethod(
        Invocation.setter(
          #filter,
          _filter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Rx<String> get sort => (super.noSuchMethod(
        Invocation.getter(#sort),
        returnValue: _FakeRx_5<String>(
          this,
          Invocation.getter(#sort),
        ),
      ) as _i4.Rx<String>);

  @override
  set sort(_i4.Rx<String>? _sort) => super.noSuchMethod(
        Invocation.setter(
          #sort,
          _sort,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get sortList => (super.noSuchMethod(
        Invocation.getter(#sortList),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i4.RxList<_i7.PokemonItem> get pokemon => (super.noSuchMethod(
        Invocation.getter(#pokemon),
        returnValue: _FakeRxList_6<_i7.PokemonItem>(
          this,
          Invocation.getter(#pokemon),
        ),
      ) as _i4.RxList<_i7.PokemonItem>);

  @override
  set pokemon(_i4.RxList<_i7.PokemonItem>? _pokemon) => super.noSuchMethod(
        Invocation.setter(
          #pokemon,
          _pokemon,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.RxList<_i7.PokemonType> get pokemonTypes => (super.noSuchMethod(
        Invocation.getter(#pokemonTypes),
        returnValue: _FakeRxList_6<_i7.PokemonType>(
          this,
          Invocation.getter(#pokemonTypes),
        ),
      ) as _i4.RxList<_i7.PokemonType>);

  @override
  set pokemonTypes(_i4.RxList<_i7.PokemonType>? _pokemonTypes) =>
      super.noSuchMethod(
        Invocation.setter(
          #pokemonTypes,
          _pokemonTypes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_7<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i4.InternalFinalCallback<void>);

  @override
  _i4.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_7<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i4.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get listeners => (super.noSuchMethod(
        Invocation.getter(#listeners),
        returnValue: 0,
      ) as int);

  @override
  _i4.RxStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _FakeRxStatus_8(
          this,
          Invocation.getter(#status),
        ),
      ) as _i4.RxStatus);

  @override
  set value(List<_i7.PokemonItem>? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<dynamic> onInit() => (super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<void> fetchAllPokemon() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllPokemon,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> fetchPokemonByType() => (super.noSuchMethod(
        Invocation.method(
          #fetchPokemonByType,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> fetchAllType() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllType,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> fetchDetails(List<_i7.PokemonItem>? pokemonList) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDetails,
          [pokemonList],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChangeFilter(String? newValue) => super.noSuchMethod(
        Invocation.method(
          #onChangeFilter,
          [newValue],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sortPokemon(List<_i7.PokemonItem>? list) => super.noSuchMethod(
        Invocation.method(
          #sortPokemon,
          [list],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeSort(String? newValue) => super.noSuchMethod(
        Invocation.method(
          #onChangeSort,
          [newValue],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void update([
    List<Object>? ids,
    bool? condition = true,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #update,
          [
            ids,
            condition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Disposer addListener(_i9.GetStateUpdate? listener) => (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValue: () {},
      ) as _i9.Disposer);

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
        Invocation.method(
          #refreshGroup,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyChildrens() => super.noSuchMethod(
        Invocation.method(
          #notifyChildrens,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListenerId(
    Object? id,
    _i10.VoidCallback? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListenerId,
          [
            id,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Disposer addListenerId(
    Object? key,
    _i9.GetStateUpdate? listener,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListenerId,
          [
            key,
            listener,
          ],
        ),
        returnValue: () {},
      ) as _i9.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
        Invocation.method(
          #disposeId,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void change(
    List<_i7.PokemonItem>? newState, {
    _i4.RxStatus? status,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #change,
          [newState],
          {#status: status},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void append(
    _i6.Future<List<_i7.PokemonItem>> Function() Function()? body, {
    String? errorMessage,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #append,
          [body],
          {#errorMessage: errorMessage},
        ),
        returnValueForMissingStub: null,
      );
}
